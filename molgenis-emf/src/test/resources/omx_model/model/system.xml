<?xml version="1.0" encoding="UTF-8"?>
<molgenis name="org.molgenis.omx">
	<module name="core">
		<entity name="Autoid" abstract="true" system="true">
			<description>This interface assigns an automatic &apos;id&apos;.
			</description>
			<field name="id" type="autoid" hidden="true" description="automatically generated internal id, only for internal use."></field>
		</entity>
		<entity name="Identifiable" implements="Autoid" abstract="true" system="true" xref_label="Identifier">
			<description>This interface assigns an automatic &apos;id&apos;, globally
				unique identifier
				&apos;identifier&apos; field, and possibly not unique &apos;name&apos;
				to all entities that implement it.
			</description>
			<field name="Identifier" type="string" description="user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234"></field>
			<field name="Name" type="string" description="human readible name, not necessary unique."></field>
			<unique fields="Identifier"></unique>
		</entity>		
		<entity name="MolgenisEntity" system="true" implements="Autoid" xref_label="className">
			<description>Referenceable catalog of entity names, menus, forms and
				plugins.
			</description>
			<field name="name" description="Name of the entity"></field>
			<field name="type_" description="Type of the entity"></field>
			<field name="className" unique="true" description="Full name of the entity"></field>
			<unique fields="name,type_"></unique>
		</entity>
		<entity name="MolgenisFile" implements="Identifiable" decorator="org.molgenis.omx.decorators.MolgenisFileDecorator" xref_label="Name">
			<description>
				Helper entity to deal with files. Has a decorator to regulate
				storage and coupling to an Entity. Do not make abstract because of
				subtyping. This means the names of the subclasses will be used to
				distinguish MolgenisFiles and place them in the correct folders.
			</description>
			<field name="Extension" nillable="false" length="8" description="The file extension. This will be mapped to MIME type at runtime. For example, a type &apos;png&apos; will be served out as &apos;image/png&apos;."></field>
			<unique fields="Name"></unique>
		</entity>
		<entity name="RuntimeProperty" implements="Identifiable" xref_label="Name">
			<field name="Value" type="text" nillable="false"></field>
			<unique fields="Name" description="Name is unique within its type "></unique>
		</entity>
	</module>
</molgenis>